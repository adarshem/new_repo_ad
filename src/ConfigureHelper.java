

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Map;
import java.util.Properties;

import org.apache.log4j.Logger;

/**
 * Copyright (C) 2014 QuickMobile
 * 
 * @author Xuemei Zhang
 * @since 2014-06-01
 * 
 * @version 1.0
 * 
 */
public class ConfigureHelper {
	private static Logger logger = Logger.getLogger(ConfigureHelper.class);

	/**
	 * load all properties from configuration file to memory
	 * 
	 * @param filename
	 * @return
	 */
	public static Properties loadProperties(String filename) {
		InputStream input = null;
		Properties prop = new Properties();

		try {
			input = new FileInputStream("config/" + filename);
			prop.load(input);
			logger.info("config/" + filename + " is loaded.");

		} catch (FileNotFoundException e) {
			logger.warn("config/" + filename + " does NOT exist!\n");
		} catch (IOException e) {
			logger.error("Fail to open: config/" + filename, e);
		} finally {
			try {
				if (input != null) {
					input.close();
					logger.info("config/" + filename + " is closed.");
				}
			} catch (IOException e) {
				logger.error("Fail to close: config/" + filename, e);
			}
		}

		return prop;
	}

	/**
	 * Add one new property appending to the end.
	 * 
	 * @param filename
	 * @param key
	 * @param value
	 */
	public static void writeProperty(String filename, String key, String value) {

		OutputStream output = null;
		Properties prop = new Properties();

		try {
			output = new FileOutputStream("config/" + filename, true);
			prop.setProperty(key, value);
			prop.store(output,
					"######  value generated by automation script  #####");
			logger.info("Store temp test data into config/" + filename + ".");
		} catch (FileNotFoundException e) {
			logger.warn("Fail to create: config/" + filename
					+ " does NOT exist!\n");
		} catch (IOException e) {
			logger.error("Fail to open: config/" + filename, e);
		} finally {
			try {
				if (output != null) {
					output.close();
					logger.info("config/" + filename + " is closed");
				}
			} catch (IOException e) {
				logger.error("Fail to close: config/" + filename, e);
			}
		}
	}

	/**
	 * Add more than one property at once, appending to the end.
	 * 
	 * @param filename
	 * @param m
	 */
	public static void writeProperty(String filename, Map<String, String> m) {
		OutputStream output = null;
		Properties prop = new Properties();

		try {
			output = new FileOutputStream("config/" + filename, true);

			for (String key : m.keySet()) {
				prop.setProperty(key, m.get(key));
			}
			prop.store(output,
					"######value generated by automation script#####");
			logger.info("Store temp test data into config/" + filename + ".");
		} catch (FileNotFoundException e) {
			logger.warn("Fail to create: config/" + filename
					+ " does NOT exist!\n");
		} catch (IOException e) {
			logger.error("Fail to open: config/" + filename, e);
		} finally {
			try {
				if (output != null) {
					output.close();
					logger.info("config/" + filename + " is closed");
				}
			} catch (IOException e) {
				logger.error("Fail to close: config/" + filename, e);
			}
		}

	}

	/**
	 * Delete temporary property files
	 * 
	 * @param fileName
	 */
	public static void deleteTempFile(String fileName) {
		File f = new File("config/" + fileName);
		if (f.exists()) {
			f.delete();
			logger.info("Temp file config/" + fileName + " is deleted.");
		}
	}

}